apiVersion: v1
kind: Template
metadata:
  name: harbor-database-template
  annotations:
    description: "A template for generating Harbor's database service"
parameters:
  - name: SERVICE_NAME
    description: Name of this service
    required: true
  - name: SAFE_BRANCH
    description: Which branch this belongs to, special chars replaced with dashes
    required: true
  - name: SAFE_PROJECT
    description: Which project this belongs to, special chars replaced with dashes
    required: true
  - name: BRANCH
    description: Which branch this belongs to, original value
    required: true
  - name: PROJECT
    description: Which project this belongs to, original value
    required: true
  - name: LAGOON_GIT_SHA
    description: git hash sha of the current deployment
    required: true
  - name: SERVICE_ROUTER_URL
    description: URL of the Router for this service
    value: ""
  - name: OPENSHIFT_PROJECT
    description: Name of the Project that this service is in
    required: true
  - name: REGISTRY
    description: Registry where Images are pushed to
    required: true
  - name: DEPLOYMENT_STRATEGY
    description: Strategy of Deploymentconfig
    value: "Rolling"
  - name: SERVICE_IMAGE
    description: Pullable image of service
    required: true
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME} # "harbor-database"
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  spec:
    ports:
      - port: 5432
    selector:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: ${SERVICE_NAME} # harbor-database
    labels:
      service: ${SERVICE_NAME}
      branch: ${SAFE_BRANCH}
      project: ${SAFE_PROJECT}
  spec:
    replicas: 1
    serviceName: ${SERVICE_NAME} # harbor-database
    selector:
      matchLabels:
        service: ${SERVICE_NAME}
        branch: ${SAFE_BRANCH}
        project: ${SAFE_PROJECT}
    template:
      metadata:
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
      spec:
        hostname: ${SERVICE_NAME} # harbor-database
        initContainers:
        - name: "remove-lost-found"
          image: ${SERVICE_IMAGE} # cdchris12/harbor-postgres:9.6
          imagePullPolicy: Always
          command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
          volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
          env:
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-password
                  key: POSTGRESQL_PASSWORD
        containers:
        - name: database
          image: ${SERVICE_IMAGE} # cdchris12/harbor-postgres:9.6
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - bash
              - "-c"
              - |
                pg_isready -U postgres
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - bash
              - "-c"
              - |
                pg_isready -U postgres
            initialDelaySeconds: 1
            periodSeconds: 10
          env:
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-password
                  key: POSTGRESQL_PASSWORD
          volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
    volumeClaimTemplates:
    - metadata:
        name: "database-data"
        labels:
          service: ${SERVICE_NAME}
          branch: ${SAFE_BRANCH}
          project: ${SAFE_PROJECT}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "5Gi"
